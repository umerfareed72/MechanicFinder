  calculateDistance = (lat1, lat2, long1, long2) => {
    //Convert Distance in Radian by multplying lat and long with 180/pi
    let Lat1 = lat1 / 57.29577951;
    let Lat2 = lat2 / 57.29577951;
    let Long1 = long1 / 57.29577951;
    let Long2 = long2 / 57.29577951;
    // Calaculate distance
    let dlat = Lat2 - Lat1;
    let dlong = Long2 - Long1;
    //Apply Heversine Formula to calculate  Distance of Spherical Objects
    let a =
      Math.pow(Math.sin(dlat / 2), 2) +
      Math.cos(Lat1) * Math.cos(Lat2) * Math.pow(Math.sin(dlong / 2), 2);
    let c = 2 * Math.asin(Math.sqrt(a));
    let r = 6371;
    let result = c * r; //Get Result In KM
    //Found In 10 KM

    if (result <= 10000) {
      //Distance get

      console.log(result, lat2, long2);
    }
  };

  requestUserLocation = async () => {
    try {
      const grantedLocation = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        {
          title: 'Location Permission',

          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        },
      );
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION,
        {
          title: 'Cool Location Permission',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        },
      );
      if (
        grantedLocation === PermissionsAndroid.RESULTS.GRANTED &&
        granted === PermissionsAndroid.RESULTS.GRANTED
      ) {
        //Get User Location
        Geolocation.getCurrentPosition(
          (position) => {
            console.log(position);
            //Get Mechanic Data
            axios
              .get(URL.Url + 'meUser', {
                headers: {
                  'x-access-token':
                    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiI1ZjVkM2JkMGM5NDAwYTExY2NmMDVkMGEiLCJpYXQiOjE1OTk5NDU2ODB9.55ywyd7urLdO1Xqt-OnFXxldvIm6i-eNHNOAjUN7LOE',
                },
              })
              .then((response) => {
                console.log(response.data.userid);
                this.setState({
                  data: response.data,
                  userid: response.data.userid,
                  latitude: position.coords.latitude,
                  longitude: position.coords.longitude,
                });
              });
            axios
              .patch(URL.Url + 'updateuserlocation', {
                _id: this.state.userid,
                latitude: this.state.latitude,
                longitude: this.state.longitude,
              }).then((response)=>{
                console.log(response)
              })
              //
              //     this.state.data.map((item) => {
              //       axios
              //         .patch(URL.Url + 'updateuserlocation', {
              //           _id: item._id,
              //           latitude: position.coords.latitude,
              //           longitude: position.coords.longitude,
              //         })
              //         .then((response) => {
              //           console.log(response, 'heavy');
              //         });
              //     });
              //   });
              // //Get All Mechanic Location Store Data
              // axios
              //   .get(URL.Url + 'getmechaniclocation')
              //   .then((response) => {
              //     this.setState({
              //       locations: response.data,
              //     });
              //     this.state.locations.map((location) => {
              //       this.calculateDistance(
              //         this.state.latitude,
              //         location.latitude,
              //         this.state.longitude,
              //         location.longitude,
              //       );
              //     });
              // })
              .catch((error) => {
                console.log(error);
              });
          },
          (error) => {
            // See error code charts below.
            console.log(error.code, error.message);
          },
          {enableHighAccuracy: true, timeout: 15000, maximumAge: 10000},
        );
      }
    } catch (err) {
      console.warn(err);
    }
  };

  componentDidMount() {
    this.requestUserLocation();
  }


  calculateDistance = (lat1, lat2, long1, long2) => {
    //Convert Distance in Radian by multplying lat and long with 180/pi
    let Lat1 = lat1 / 57.29577951;
    let Lat2 = lat2 / 57.29577951;
    let Long1 = long1 / 57.29577951;
    let Long2 = long2 / 57.29577951;
    // Calaculate distance
    let dlat = Lat2 - Lat1;
    let dlong = Long2 - Long1;
    //Apply Heversine Formula to calculate  Distance of Spherical Objects
    let a =
      Math.pow(Math.sin(dlat / 2), 2) +
      Math.cos(Lat1) * Math.cos(Lat2) * Math.pow(Math.sin(dlong / 2), 2);
    let c = 2 * Math.asin(Math.sqrt(a));
    let r = 6371;
    let result = c * r; //Get Result In KM
    //Found In 10 KM

    if (result <= 10000) {
      //Distance get

      console.log(result, lat2, long2);
    }
  };

  requestUserLocation = async () => {
    try {
      const grantedLocation = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        {
          title: 'Location Permission',

          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        },
      );
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION,
        {
          title: 'Cool Location Permission',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        },
      );
      if (
        grantedLocation === PermissionsAndroid.RESULTS.GRANTED &&
        granted === PermissionsAndroid.RESULTS.GRANTED
      ) {
        //Get User Location
        Geolocation.getCurrentPosition(
          (position) => {
            console.log(position);
            this.setState({
              latitude: position.coords.latitude,
              longitude: position.coords.longitude,
            });
          
            //Get Mechanic Token
            // axios
            //   .patch(URL.Url + 'updateuserlocation', {
            //     _id: this.state.userid,
            //     latitude: this.state.latitude,
            //     longitude: this.state.longitude,
            //   }).then((response)=>{
            //     console.log(response)
            //   })
            //
            //     this.state.data.map((item) => {
            //       axios
            //         .patch(URL.Url + 'updateuserlocation', {
            //           _id: item._id,
            //           latitude: position.coords.latitude,
            //           longitude: position.coords.longitude,
            //         })
            //         .then((response) => {
            //           console.log(response, 'heavy');
            //         });
            //     });
            //   });
            // //Get All Mechanic Location Store Data
            // axios
            //   .get(URL.Url + 'getmechaniclocation')
            //   .then((response) => {
            //     this.setState({
            //       locations: response.data,
            //     });
            //     this.state.locations.map((location) => {
            //       this.calculateDistance(
            //         this.state.latitude,
            //         location.latitude,
            //         this.state.longitude,
            //         location.longitude,
            //       );
            //     });
            // })
            // .catch((error) => {
            //   console.log(error);
            // });
          },
          (error) => {
            // See error code charts below.
            console.log(error.code, error.message);
          },
          {enableHighAccuracy: true, timeout: 15000, maximumAge: 10000},
        );

      }
    } catch (err) {
      console.warn(err);
    }
  
  };


this.state.mechanics.map((item)=>{
 axios.get(URL.Url+'mechanic/'+item.mechanicid).then((response)=>{
   console.log(response.data)
 this.setState({dataSource:response.data})
  }).catch((error)=>{
   console.log(error)
 }) 
})